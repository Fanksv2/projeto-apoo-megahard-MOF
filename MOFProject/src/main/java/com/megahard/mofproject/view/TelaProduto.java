/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.megahard.mofproject.view;

import com.megahard.mofproject.control.DBContext;
import com.megahard.mofproject.model.EstoqueItem;
import com.megahard.mofproject.model.Ingrediente;
import com.megahard.mofproject.model.Produto;
import com.megahard.mofproject.model.QuantidadeIngrediente;
import com.megahard.mofproject.utils.ListUtils;
import com.megahard.mofproject.utils.ViewUtils;
import java.text.Format;
import java.text.NumberFormat;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.List;
import java.util.Locale;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFormattedTextField;
import javax.swing.ListSelectionModel;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.MaskFormatter;
import javax.swing.text.NumberFormatter;

/**
 *
 * @author rafae
 */
public class TelaProduto extends javax.swing.JFrame {

    public List<Ingrediente> ingredientesSelecionados;
    
    public TelaProduto() throws ParseException {
        initComponents();
        
        ingredientesSelecionados = new ArrayList<>();
        
        tabelaIngredientesExistentes.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        tabelaIngredientesSelecionados.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        tabelaProdutosExistentes.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        
        atualizarTabelaIngredientesExistentes();
        atualizarTabelaProdutosExistentes();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabelaIngredientesExistentes = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        tabelaProdutosExistentes = new javax.swing.JTable();
        btAdd = new javax.swing.JButton();
        btCriar = new javax.swing.JButton();
        btRemover = new javax.swing.JButton();
        btApagar = new javax.swing.JButton();
        btSair = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        tabelaIngredientesSelecionados = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        nomeProdutoText = new javax.swing.JTextField();
        btLimpar = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        precoProdutoText = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel2.setFont(new java.awt.Font("Arial Black", 0, 24)); // NOI18N
        jLabel2.setText("MONTAGEM DE PRODUTOS");

        tabelaIngredientesExistentes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "INGREDIENTES EXISTENTES"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tabelaIngredientesExistentes);

        tabelaProdutosExistentes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "PRODUTOS CRIADOS", "PREÇO"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tabelaProdutosExistentes);
        if (tabelaProdutosExistentes.getColumnModel().getColumnCount() > 0) {
            tabelaProdutosExistentes.getColumnModel().getColumn(1).setMaxWidth(120);
        }

        btAdd.setText("Adicionar Ingrediente");
        btAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btAddActionPerformed(evt);
            }
        });

        btCriar.setText("Criar");
        btCriar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btCriarActionPerformed(evt);
            }
        });

        btRemover.setText("Remover Ingrediente");
        btRemover.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btRemoverActionPerformed(evt);
            }
        });

        btApagar.setText("Apagar Produto");
        btApagar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btApagarActionPerformed(evt);
            }
        });

        btSair.setText("Sair");
        btSair.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btSairActionPerformed(evt);
            }
        });

        tabelaIngredientesSelecionados.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "INGREDIENTES SELECIONADOS"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(tabelaIngredientesSelecionados);

        jLabel1.setText("Nome do produto:");

        btLimpar.setText("Limpar Selecionados");
        btLimpar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btLimparActionPerformed(evt);
            }
        });

        jLabel3.setText("Preço:");

        precoProdutoText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                precoProdutoTextActionPerformed(evt);
            }
        });
        precoProdutoText.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                precoProdutoTextPropertyChange(evt);
            }
        });
        precoProdutoText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                precoProdutoTextKeyTyped(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 240, Short.MAX_VALUE)
                    .addComponent(btAdd, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 116, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btLimpar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btCriar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btRemover, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel3))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(precoProdutoText, javax.swing.GroupLayout.PREFERRED_SIZE, 269, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(nomeProdutoText, javax.swing.GroupLayout.PREFERRED_SIZE, 269, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(84, 84, 84)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btSair, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 254, Short.MAX_VALUE)
                    .addComponent(btApagar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(30, 30, 30))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addGap(39, 39, 39)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(78, 78, 78)
                                .addComponent(btSair, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btAdd)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btApagar)
                            .addComponent(btRemover))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(nomeProdutoText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(precoProdutoText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btCriar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btLimpar)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btSairActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btSairActionPerformed
        // TODO add your handling code here:
        dispose();
    }//GEN-LAST:event_btSairActionPerformed

    private void btLimparActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btLimparActionPerformed
        // TODO add your handling code here:
        ViewUtils.cleanTable(tabelaIngredientesSelecionados);
        ingredientesSelecionados = new ArrayList<>();
    }//GEN-LAST:event_btLimparActionPerformed

    private void btAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btAddActionPerformed
        // TODO add your handling code here:
        String ingSelecionadoNome = ViewUtils.getRowFirstField(tabelaIngredientesExistentes);
        if(ingSelecionadoNome.isEmpty()){
            return;
        }
        
        Ingrediente ingrediente = null;
        for(Ingrediente ing : DBContext.getInstance().getDbIngrediente()){
            if(ing.getNome().equals(ingSelecionadoNome)){
                ingrediente = ing;
                break;
            }
        }
        
        ingredientesSelecionados.add(ingrediente);
        atualizarTabelaIngredientesSelecionados();
    }//GEN-LAST:event_btAddActionPerformed

    private void btRemoverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btRemoverActionPerformed
        String ingredienteNome = ViewUtils.getRowFirstField(tabelaIngredientesSelecionados);
        if(ingredienteNome.isEmpty()){
            return;
        }
        
        Ingrediente ingrediente = null;
        for(Ingrediente ing : ingredientesSelecionados){
            if(ing.getNome().equals(ingredienteNome)){
                ingrediente = ing;
                break;
            }
        }
        if(ingrediente == null)
            return;
        
        ingredientesSelecionados.remove(ingrediente);
        atualizarTabelaIngredientesSelecionados();
    }//GEN-LAST:event_btRemoverActionPerformed

    private void btCriarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btCriarActionPerformed
        String produtoNome = nomeProdutoText.getText();
        if(produtoNome.isEmpty()){
            return;
        }
        if(precoProdutoText.getText().isEmpty()){
            return;
        }
        if(ingredientesSelecionados.size() == 0){
            return;
        }
        
        Produto prod = null;
        for(Produto p : DBContext.getInstance().getDbProduto()){
            if(p.getNomeProduto().equals(produtoNome)){
                prod = p;
            }
        }
        
        if(prod != null){
            return;
        }
        
        float preco = Float.parseFloat(precoProdutoText.getText());
        
        Produto produto = new Produto();
        produto.setNomeProduto(produtoNome);
        produto.setPreco(preco);
        
        for(Ingrediente i : ListUtils.removeDuplicates(ingredientesSelecionados)){
            int qtd = 0;
            for(Ingrediente j : ingredientesSelecionados){
                if(i.getNome().equals(j.getNome())){
                    qtd++;
                }
            }
            QuantidadeIngrediente qtdIngrediente = new QuantidadeIngrediente();
            qtdIngrediente.setIngrediente(i);
            qtdIngrediente.setQuantidadeNecessaria(qtd);
            
            produto.getQuantidadeIngredientes().add(qtdIngrediente);
        }
        DBContext.getInstance().getDbProduto().add(produto);
        atualizarTabelaProdutosExistentes();
        System.out.println(produto);
    }//GEN-LAST:event_btCriarActionPerformed

    
    private void precoProdutoTextKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_precoProdutoTextKeyTyped
        char c = evt.getKeyChar();
        if(c == '.'){
            return;
        }
        if(!Character.isDigit(c)) {
            evt.consume();
        }

    }//GEN-LAST:event_precoProdutoTextKeyTyped

    private void precoProdutoTextPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_precoProdutoTextPropertyChange

    }//GEN-LAST:event_precoProdutoTextPropertyChange

    private void precoProdutoTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_precoProdutoTextActionPerformed
        if(!precoProdutoText.getText().isEmpty())
            precoProdutoText.setText(NumberFormat.getCurrencyInstance().format(Double.parseDouble(precoProdutoText.getText())));
    }//GEN-LAST:event_precoProdutoTextActionPerformed

    private void btApagarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btApagarActionPerformed
        String produtoSelecionadoNome = ViewUtils.getRowFirstField(tabelaProdutosExistentes);
        if(produtoSelecionadoNome.isEmpty()){
            return;
        }
        
        Produto produto = null;
        for(Produto p : DBContext.getInstance().getDbProduto()){
            if(p.getNomeProduto().equals(produtoSelecionadoNome)){
                produto = p;
            }
        }
        if(produto == null){
            return;
        }
        
        DBContext.getInstance().getDbProduto().remove(produto);
        atualizarTabelaProdutosExistentes();
        
    }//GEN-LAST:event_btApagarActionPerformed

    public void atualizarTabelaIngredientesExistentes(){
        ViewUtils.cleanTable(tabelaIngredientesExistentes);
        DefaultTableModel model = (DefaultTableModel) tabelaIngredientesExistentes.getModel();
        
        List<Ingrediente> ingredientes = DBContext.getInstance().getDbIngrediente();
        for(Ingrediente ingrediente : ingredientes){
            model.addRow(new Object[]{ingrediente.getNome()});
        }
    }
    
    public void atualizarTabelaProdutosExistentes(){
        ViewUtils.cleanTable(tabelaProdutosExistentes);
        DefaultTableModel model = (DefaultTableModel) tabelaProdutosExistentes.getModel();
        
        List<Produto> produtos = DBContext.getInstance().getDbProduto();
        for(Produto produto : produtos){
            model.addRow(new Object[]{produto.getNomeProduto(), produto.getPreco()});
        }
    }
    
    public void atualizarTabelaIngredientesSelecionados(){
        ViewUtils.cleanTable(tabelaIngredientesSelecionados);
        DefaultTableModel model = (DefaultTableModel) tabelaIngredientesSelecionados.getModel();
        
        List<Ingrediente> ingredientes = ingredientesSelecionados;
        for(Ingrediente ingrediente : ingredientes){
            model.addRow(new Object[]{ingrediente.getNome()});
        }
    }
    
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TelaProduto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TelaProduto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TelaProduto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TelaProduto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new TelaProduto().setVisible(true);
                } catch (ParseException ex) {
                    Logger.getLogger(TelaProduto.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btAdd;
    private javax.swing.JButton btApagar;
    private javax.swing.JButton btCriar;
    private javax.swing.JButton btLimpar;
    private javax.swing.JButton btRemover;
    private javax.swing.JButton btSair;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextField nomeProdutoText;
    private javax.swing.JTextField precoProdutoText;
    private javax.swing.JTable tabelaIngredientesExistentes;
    private javax.swing.JTable tabelaIngredientesSelecionados;
    private javax.swing.JTable tabelaProdutosExistentes;
    // End of variables declaration//GEN-END:variables
}
